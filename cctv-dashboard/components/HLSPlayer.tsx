"use client";

import React, { useRef, useState } from "react";

export default function HLSPlayer() {
  const videoRef = useRef<HTMLVideoElement>(null);
  const [currentStream, setCurrentStream] = useState<string>("");
  const [isPlaying, setIsPlaying] = useState(false);
  const [error, setError] = useState<string>("");
  const [hlsFiles, setHlsFiles] = useState<string[]>([]);

  // Get list of available HLS files
  const loadHLSFiles = async () => {
    try {
      const response = await fetch("https://localhost:3002/api/hls-files");
      if (response.ok) {
        const files = await response.json();
        setHlsFiles(files.filter((f: string) => f.endsWith(".m3u8")));
      }
    } catch (err) {
      setError("Could not load HLS files");
    }
  };

  const playHLSStream = async (fileName: string) => {
    try {
      setError("");
      const streamUrl = `https://localhost:3002/hls/${fileName}`;

      if (videoRef.current) {
        videoRef.current.src = streamUrl;
        await videoRef.current.load();
        await videoRef.current.play();
        setCurrentStream(fileName);
        setIsPlaying(true);
      }
    } catch (err) {
      setError(`Failed to play stream: ${(err as Error).message}`);
      setIsPlaying(false);
    }
  };

  const stopStream = () => {
    if (videoRef.current) {
      videoRef.current.pause();
      videoRef.current.src = "";
      setCurrentStream("");
      setIsPlaying(false);
    }
  };

  React.useEffect(() => {
    loadHLSFiles();
    // Refresh file list every 5 seconds
    const interval = setInterval(loadHLSFiles, 5000);
    return () => clearInterval(interval);
  }, []);

  return (
    <div className="bg-gray-800 p-6 rounded-lg">
      <h3 className="text-xl font-semibold text-white mb-4">
        HLS Stream Player
      </h3>

      <div
        className="relative bg-black rounded-lg mb-4"
        style={{ aspectRatio: "16/9" }}
      >
        <video
          ref={videoRef}
          controls
          playsInline
          className="w-full h-full rounded-lg object-cover"
        />

        {!currentStream && (
          <div className="absolute inset-0 flex items-center justify-center bg-gray-900 rounded-lg">
            <div className="text-center text-gray-400">
              <div className="text-4xl mb-2">üì∫</div>
              <p>Select an HLS stream to play</p>
            </div>
          </div>
        )}

        {isPlaying && (
          <div className="absolute top-2 left-2 bg-red-500 text-white px-2 py-1 rounded text-xs font-semibold">
            ‚óè PLAYING: {currentStream}
          </div>
        )}
      </div>

      {error && (
        <div className="bg-red-900/20 border border-red-500 text-red-300 p-3 rounded-lg mb-4">
          {error}
        </div>
      )}

      <div className="mb-4">
        <div className="flex gap-4 mb-4">
          <button
            onClick={loadHLSFiles}
            className="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded font-semibold"
          >
            Refresh Files
          </button>
          <button
            onClick={stopStream}
            disabled={!isPlaying}
            className={`px-4 py-2 rounded font-semibold ${
              !isPlaying
                ? "bg-gray-600 text-gray-400 cursor-not-allowed"
                : "bg-red-600 hover:bg-red-700 text-white"
            }`}
          >
            Stop
          </button>
        </div>

        <div className="space-y-2">
          <h4 className="text-white font-semibold">
            Available HLS Streams ({hlsFiles.length}):
          </h4>
          <div className="max-h-40 overflow-y-auto space-y-1">
            {hlsFiles.map((file, index) => (
              <div
                key={index}
                className="flex items-center justify-between bg-gray-700 p-2 rounded"
              >
                <span className="text-gray-300 text-sm font-mono">{file}</span>
                <button
                  onClick={() => playHLSStream(file)}
                  className="px-3 py-1 bg-green-600 hover:bg-green-700 text-white rounded text-sm"
                >
                  Play
                </button>
              </div>
            ))}
          </div>

          {hlsFiles.length === 0 && (
            <p className="text-gray-500 text-sm">
              No HLS files available. Run a stream test to generate content.
            </p>
          )}
        </div>
      </div>

      <div className="text-sm text-gray-400">
        <p>üí° This player shows HLS files generated by your RTSP conversion.</p>
        <p>
          Files are created in the /rtsp-server/hls directory when streams are
          processed.
        </p>
      </div>
    </div>
  );
}
